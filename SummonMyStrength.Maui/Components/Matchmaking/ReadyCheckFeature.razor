@using SummonMyStrength.Api.Matchmaking
@using SummonMyStrength.Maui.Data
@implements IDisposable
@inject IUserSettingsService UserSettingsService
@inject IReadyCheckService ReadyCheckService

<ComponentSettings SectionName="Ready Check">
    <ReadyCheckSettings />
</ComponentSettings>

<ReadyCheckPanel />

@code {
    private const float Delay = 2.5f;

    private UserSettings _userSettings;
    private Timer _timer;
    private bool _isTimerRunning;

    protected override async Task OnInitializedAsync()
    {
        _timer = new Timer(TimerElapsed, null, Timeout.Infinite, Timeout.Infinite);

        ReadyCheckService.ReadyCheckUpdated += ReadyCheckUpdated;

        _userSettings = await UserSettingsService.GetSettingsAsync();

        var readyCheck = await ReadyCheckService.GetReadyCheckAsync();

        if (readyCheck != null)
        {
            await ReadyCheckUpdated(readyCheck);
        }
    }

    public void Dispose()
    {
        ReadyCheckService.ReadyCheckUpdated -= ReadyCheckUpdated;
    }

    private void TimerElapsed(object _)
    {
        _isTimerRunning = false;
        _ = ReadyCheckService.AcceptReadyCheckAsync();
    }

    private async Task ReadyCheckUpdated(ReadyCheck readyCheck)
    {
        if (readyCheck.PlayerResponse != ReadyCheckPlayerResponse.None)
        {
            _timer.Change(Timeout.Infinite, Timeout.Infinite);
            _isTimerRunning = false;
        }
        else if (readyCheck.Timer > Delay)
        {
            _timer.Change(Timeout.Infinite, Timeout.Infinite);
            _isTimerRunning = false;
            await ReadyCheckService.AcceptReadyCheckAsync();
        }
        else if (!_isTimerRunning)
        {
            _timer.Change((int)((Delay - readyCheck.Timer) * 1000), Timeout.Infinite);
            _isTimerRunning = true;
        }
    }
}