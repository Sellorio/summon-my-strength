@using SummonMyStrength.Api
@using SummonMyStrength.Api.Champions
@using System.Text.RegularExpressions
@inject LeagueClient LeagueClient

<button @onclick="() => _isExpanded = !_isExpanded">
    @if (SelectedChampion == null)
    {
        <div class="no-champion-icon"></div>
    }
    else
    {
        <img class="champion-icon" src="@LeagueClient.Champions.GetIconUrl(SelectedChampion)">
    }
</button>

@if (_isExpanded)
{
    <div class="underlay" @onclick="() => _isExpanded = false"></div>
    <div class="champ-select">
        <input type="text" value="@_searchText" @oninput="SearchTextChanged">
        <div class="search-results">
            @foreach (var r in _filteredChampions)
            {
                var result = r;

                <MudGrid Spacing="0" Style="align-items:center" @onclick="() => SelectChampAsync(result)">
                    <MudItem>
                        <img class="champion-icon" src="@LeagueClient.Champions.GetIconUrl(result)">
                    </MudItem>
                    <MudItem Style="flex-grow:1">
                        @result.Name
                    </MudItem>
                </MudGrid>
            }
        </div>
    </div>
}

@code {
    private bool _isExpanded;
    private string _searchText;
    private Champion[] _filteredChampions { get; set; } = [];

    [Parameter]
    public ICollection<Champion> Champions { get; set; }

    [Parameter]
    public Champion SelectedChampion { get; set; }

    [Parameter]
    public EventCallback<Champion> SelectedChampionChanged { get; set; }

    private void SearchTextChanged(ChangeEventArgs args)
    {
        _searchText = args.Value?.ToString();
        string asRegex = $".*{string.Join(string.Empty, _searchText?.Select(x => Regex.Escape(x.ToString()) + ".*"))}";
        _filteredChampions = Champions.Where(x => Regex.IsMatch(x.Name, asRegex)).Take(5).ToArray();
    }

    private async Task SelectChampAsync(Champion champion)
    {
        _isExpanded = false;
        await SelectedChampionChanged.InvokeAsync(SelectedChampion = champion);
    }
}
