@using SummonMyStrength.Api.Gameflow
@implements IDisposable
@inject SummonMyStrength.Api.LeagueClient LeagueClient

<MudAppBar Fixed="false">
    <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="OnToggleSidebar" Disabled="Disabled" />
    
    @if (_isConnected)
    {
        <MudText Typo="Typo.h6" Color="Color.Success" Class="ml-4 mr-8">Connected</MudText>
    }
    else
    {
        <MudText Typo="Typo.h6" Color="Color.Error" Class="ml-4 mr-8">Not Connected</MudText>
    }

    @if (_currentPhase != null)
    {
        <MudText Typo="Typo.h6" Color="Color.Info">@_currentPhase.ToDisplay()</MudText>
    }
</MudAppBar>

@code {
    private bool _isConnected;
    private GameflowPhase? _currentPhase;

    [Parameter]
    public EventCallback OnToggleSidebar { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    protected override void OnInitialized()
    {
        LeagueClient.Connected += ConnectionStatusChanged;
        LeagueClient.Disconnected += ConnectionStatusChanged;
        LeagueClient.Gameflow.GameflowPhaseChanged += GameflowPhaseChanged;
    }

    public void Dispose()
    {
        LeagueClient.Connected -= ConnectionStatusChanged;
        LeagueClient.Disconnected -= ConnectionStatusChanged;
        LeagueClient.Gameflow.GameflowPhaseChanged -= GameflowPhaseChanged;
    }

    private async Task ConnectionStatusChanged()
    {
        _isConnected = LeagueClient.IsConnected;

        if (LeagueClient.IsConnected)
        {
            _currentPhase = await LeagueClient.Gameflow.GetGameflowPhaseAsync();
        }
        else
        {
            _currentPhase = null;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task GameflowPhaseChanged(GameflowPhase newPhase)
    {
        _currentPhase = newPhase;
        await InvokeAsync(StateHasChanged);
    }
}
