@using SummonMyStrength.Api.ChampSelect
@using SummonMyStrength.Maui.Data
@using SummonMyStrength.Maui.Services.ChampSelect
@inject IUserSettingsService UserSettingsService
@inject IChampSelectSessionService ChampSelectSessionService
@inject IChampSelectPickOrderSwapService ChampSelectPickOrderSwapService

<ComponentSettings SectionName="Champ-Select">
    <PickOrderTradeSettings />
</ComponentSettings>

@code {
    private UserSettings _userSettings;

    protected override async Task OnInitializedAsync()
    {
        _userSettings = await UserSettingsService.GetSettingsAsync();

        ChampSelectSessionService.ChampSelectSessionUpdated += OnSessionChanged;
    }

    private async Task OnSessionChanged(ChampSelectSession session)
    {
        if (session == null)
        {
            return;
        }

        var receivedSwapRequest = session.PickOrderSwaps.FirstOrDefault(x => x.State == ChampSelectTradeState.Received);

        if (receivedSwapRequest == null)
        {
            return;
        }

        switch (_userSettings.PickOrderTradeResponse)
        {
            case TradeResponse.None:
                break;
            case TradeResponse.Accept:
                await ChampSelectPickOrderSwapService.AcceptSwapAsync(receivedSwapRequest.Id);
                break;
            case TradeResponse.Reject:
                await ChampSelectPickOrderSwapService.DeclineSwapAsync(receivedSwapRequest.Id);
                break;
            case TradeResponse.DownOnly:
                // the order in which players appear in the MyTeam list is also the pick order
                var isAfterMeInPickOrder = session.MyTeam.Where(x => x.CellId == receivedSwapRequest.CellId || x.CellId == session.LocalPlayerCellId).First().CellId == session.LocalPlayerCellId;

                if (isAfterMeInPickOrder)
                {
                    await ChampSelectPickOrderSwapService.AcceptSwapAsync(receivedSwapRequest.Id);
                }
                else
                {
                    await ChampSelectPickOrderSwapService.DeclineSwapAsync(receivedSwapRequest.Id);
                }
                break;
            default:
                throw new NotSupportedException("Unexpected trade response type.");
        }
    }
}
