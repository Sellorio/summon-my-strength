@using SummonMyStrength.Api.ChampSelect
@using SummonMyStrength.Api.Champions
@using SummonMyStrength.Maui.Services
@inject SummonMyStrength.Api.LeagueClient LeagueClient
@inject IChampSelectSessionAccessor ChampSelectSessionAccessor
@inject IRuneSetService RuneSetService

<div class="rune-load-status ma-4">
    @if (RuneSetService.RunesLoadedFor != null)
{
    <MudText Typo="Typo.h6" Color="Color.Success" style="text-align: center">
            Runes loaded for @RuneSetService.RunesLoadedFor.Name
        </MudText>
}
else
{
    <MudText Typo="Typo.h6" Color="Color.Info" style="text-align: center">
            Rune Sync waiting for champion intent/lock.
        </MudText>
}
</div>

@code {
protected override async Task OnInitializedAsync()
{
    await UpdateAsync();
    ChampSelectSessionAccessor.SessionChanged += SessionChanged;
    RuneSetService.RunesLoadedForChanged += UpdateStateAsync;
}

public void Dispose()
{
    ChampSelectSessionAccessor.SessionChanged -= SessionChanged;
    RuneSetService.RunesLoadedForChanged -= UpdateStateAsync;
}

private async Task SessionChanged(ChampSelectSession from, ChampSelectSession to)
{
    await UpdateAsync();
}

private async Task UpdateStateAsync()
{
    await InvokeAsync(StateHasChanged);
}

private async Task UpdateAsync()
{
    var player = ChampSelectSessionAccessor.Session?.Player;
    var championId =
        player == null
            ? 0
            : (player.ChampionId != default ? player.ChampionId : player.ChampionPickIntent);

    if (championId == default && RuneSetService.RunesLoadedFor == null
        || championId == RuneSetService.RunesLoadedFor?.Id)
    {
        // no change in selected champion
    }
    else if (championId == default)
    {
        await RuneSetService.LoadRunesForChampionAsync(null);
    }
    else
    {
        var champion = (await LeagueClient.Champions.GetChampionsAsync()).First(x => x.Id == championId);
        await RuneSetService.LoadRunesForChampionAsync(champion);
    }
}
}