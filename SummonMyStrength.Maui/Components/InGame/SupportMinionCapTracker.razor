@using SummonMyStrength.Api.ChampSelect
@using SummonMyStrength.Maui.Services
@implements IDisposable
@inject IGameInfoAccessor GameInfoAccessor

@{
    var gameInfo = GameInfoAccessor.GameInfo;
    var player = gameInfo?.AllPlayers.First(x => x.SummonerName == gameInfo.ActivePlayer.SummonerName);
}

@if (gameInfo != null && player.Position == ChampSelectAssignedPosition.Support)
{
    <MudText Typo="Typo.h6">Support Minion Rule</MudText>

    var max = CalculateMinionCapAtTime((int)gameInfo.GameSettings.GameTime);
    var current = player.Scores.CreepScore;
    var color = Color.Success;

    if (current > max)
    {
        color = Color.Error;
    }
    else if (max >= 10 && current + 4 > max)
    {
        color = Color.Warning;
    }

    <MudGrid Style="align-items: flex-end;">
        <MudItem>
            <MudText Typo="Typo.h3" Color="color">@current</MudText>
        </MudItem>
        <MudItem>
            <MudText Typo="Typo.subtitle1">/@max</MudText>
        </MudItem>
    </MudGrid>
}

@code {
    protected override void OnInitialized()
    {
        GameInfoAccessor.GameInfoChanged += GameInfoChanged;
    }

    public void Dispose()
    {
        GameInfoAccessor.GameInfoChanged -= GameInfoChanged;
    }

    private async Task GameInfoChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private int CalculateMinionCapAtTime(int seconds)
    {
        int baseAmount = seconds / 30 * 2;
        int postFiveMinuteBonus = Math.Max(0, seconds - 300) / 30 * 2;

        return baseAmount + postFiveMinuteBonus;
    }
}