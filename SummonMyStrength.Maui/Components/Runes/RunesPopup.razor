@implements IDisposable
@using SummonMyStrength.Api.Champions
@using SummonMyStrength.Maui.Components.Common.Champions
@using SummonMyStrength.Maui.Services
@inject SummonMyStrength.Api.LeagueClient LeagueClient
@inject IRuneSetService RuneSetService

<PopupPanelWrapper Title="Runes" OnCloseClicked="OnCloseClicked">
    <MudText Typo="Typo.h6">Select a champion</MudText>
    <MudText Typo="Typo.body2" Class="d-block">Once selected, use the League of Legends Client to edit your runes.</MudText>
    <MudTextField Class="mt-4" Label="Search" @bind-Value="_championSearchText" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Search" Immediate />
    <div class="mt-4" style="text-align: center">
        @if (_champions != null)
        {
            foreach (var item in _champions.Where(x => string.IsNullOrWhiteSpace(_championSearchText) || x.Name.Contains(_championSearchText, StringComparison.OrdinalIgnoreCase)))
            {
                var champion = item;
                <ChampionGridItem Champion="champion" Selected="RuneSetService.RunesLoadedFor == champion" OnClick="() => ChampionSelected(champion)" />
            }
        }
    </div>
</PopupPanelWrapper>

@code {
    private string _championSearchText;
    private Champion[] _champions;

    [Parameter]
    public EventCallback OnCloseClicked { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RuneSetService.RunesLoadedForChanged += UpdateStateAsync;

        _champions = await LeagueClient.Champions.GetChampionsAsync();
    }

    public void Dispose()
    {
        RuneSetService.RunesLoadedForChanged -= UpdateStateAsync;
    }

    private async Task ChampionSelected(Champion champion)
    {
        await RuneSetService.LoadRunesForChampionAsync(champion);
    }

    private async Task UpdateStateAsync()
    {
        await InvokeAsync(StateHasChanged);
    }
}