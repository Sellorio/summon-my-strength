@page "/"
@implements IDisposable
@using SummonMyStrength.Api.Gameflow
@using SummonMyStrength.Maui.Components
@using SummonMyStrength.Maui.Components.Main
@using SummonMyStrength.Maui.Components.ReadyCheck
@using SummonMyStrength.Maui.Components.ChampSelect
@using SummonMyStrength.Maui.Components.InGame
@inject SummonMyStrength.Api.LeagueClient LeagueClient

<MudDrawerContainer Class="mud-height-full">
    <Sidebar @bind-Expanded="_expandSidebar" OnOpenRunes="() => _popup = Popup.Runes" />
    <StatusBar OnToggleSidebar="() => _expandSidebar = !_expandSidebar" />
    <div class="main-content">
        @switch (_currentPhase)
        {
            case GameflowPhase.ReadyCheck:
                <ReadyCheckPanel />
                break;
            case GameflowPhase.ChampSelect:
                <ChampSelectPanel />
                break;
            case GameflowPhase.InProgress:
                <InGamePanel />
                break;
            default:
                <IdlePanel />
                break;
        }

        <PopupRenderer @bind-Popup="_popup" />
    </div>
</MudDrawerContainer>

@code {
    private bool _expandSidebar;
    private Popup _popup;
    private GameflowPhase? _currentPhase;

    protected override async Task OnInitializedAsync()
    {
        LeagueClient.Gameflow.GameflowPhaseChanged += GameflowPhaseChanged;
        await LeagueClient.ConnectAsync();
    }

    public void Dispose()
    {
        LeagueClient.Gameflow.GameflowPhaseChanged -= GameflowPhaseChanged;
    }

    private async Task GameflowPhaseChanged(GameflowPhase newPhase)
    {
        _currentPhase = newPhase;
        await InvokeAsync(StateHasChanged);
    }
}